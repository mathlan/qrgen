name: User
description: |-
  {
  "id": 3,
  "name": "Susan-Maggie Arnaud",
  "email": "bertrand.etienne@example.com",
  "email_verified_at": "2024-12-12T19:38:41.000000Z",
  "role": "user",
  "created_at": "2024-12-12T19:38:41.000000Z",
  "updated_at": "2024-12-12T19:38:41.000000Z"
  }
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get All Users (Admin)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: |-
          {
              "message": "Token not provided"
          }
        headers:
          www-authenticate: jwt-auth
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}'
    metadata:
      groupName: User
      groupDescription: |-
        {
        "id": 3,
        "name": "Susan-Maggie Arnaud",
        "email": "bertrand.etienne@example.com",
        "email_verified_at": "2024-12-12T19:38:41.000000Z",
        "role": "user",
        "created_at": "2024-12-12T19:38:41.000000Z",
        "updated_at": "2024-12-12T19:38:41.000000Z"
        }
      subgroup: ''
      subgroupDescription: ''
      title: 'Get User by ID (Admin)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: assumenda
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: assumenda
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: |-
          {
              "message": "Token not provided"
          }
        headers:
          www-authenticate: jwt-auth
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
